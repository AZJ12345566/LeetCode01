class Solution {
/*
LeetCode - 9
给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。
回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。
例如，121 是回文，而 123 不是。
*/
  public boolean isPalindrom(int x) {
    if(x < 0 || (x != 0 && x % 10 == 0)) {
      return false;
    }
    int invertedNum = 0;
    while(x > invertedNum) {
      invertedNum = invertedNum * 10 + x % 10;
      x /= 10;
    }
    return invertedNum == x || invertedNum / 10 == x;
  }
/*
LeetCode - 13
罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。
字符          数值
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。
通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：
I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 
C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
给定一个罗马数字，将其转换成整数。
*/
  public int romanToInt(String s) {
    int ans = 0;
    int preNum = getValue(s.charAt(0));
    for(int i = 1; i < s.length(); i++) {
      int num = getValue(s.charAt(i));
      if(preNum < num) {
        ans -= preNum;
      } else {
        ans += preNum;
      }
      preNum = num;
    }
    ans += preNum;
    return ans;
  }
  private int getValue(char c) {
    switch(c) {
      case 'I': return 1;
      case 'V': return 5;
      case 'X': return 10;
      case 'L': return 50;
      case 'C': return 100;
      case 'D': return 500;
      case 'M': return 1000;
      default: return 0;
    }
  }
/*
LeetCode - 14
编写一个函数来查找字符串数组中的最长公共前缀。
如果不存在公共前缀，返回空字符串 ""。
*/
  public String longestCommonPrefix(String[] strs) {
    if(strs.length == 0 || strs == null) {
      return "";
    }
    String prefix = strs[0];
    int count = strs.length;
    for(int i = 1; i < count; i++) {
      prefix = longestCommonPrefix(prefix, strs[i]);
      if(prefix == "") {
        break;
      }
    }
    return prefix;
  }
  public String longestCommonPrefix(String s1, String s2) {
    int length = Math.min(s1.length(), s2.length());
    int index = 0;
    while(index < length && s1.charAt(index) == s2.charAt(index)) {
      index++;
    }
    return s1.substring(0, index);
  }
}
